Application_controller
class ApplicationController < ActionController::Base
  before_filter :set_session_locale
  before_action :require_login
  include SessionsHelper

  def require_login
    if not current_register
      redirect_to '/signin'
    end
  end
  def set_session_locale
    I18n.locale = session[:locale] || I18n.default_locale
    session[:locale] = I18n.locale
  end
end

Main_controller
class MainController < ApplicationController
  def set_locale
    session[:locale] = params[:locale]
    redirect_to '/'
  end

  def index
  end

  def view
    stars = []
    if params[:stars]['3'] != '0' then
      stars.push(3)
    end
    if params[:stars]['4'] != '0' then
      stars.push(4)
    end
    if params[:stars]['5'] != '0' then
      stars.push(5)
    end
    if stars == [] then
      stars = [3, 4, 5]
    end
    @mas = Hotel.where(country: params[:country], city: params[:city])
    if params[:date1] != '' then
      @mas = @mas.where('date1 < ?', params[:date1])
    end
    if params[:date2] != '' then
      @mas = @mas.where('date2 > ?', params[:date2])
    end
    @mas = @mas.where(stars: stars)
  end
end

Registers_controller
class RegistersController < ApplicationController
  before_action :set_register, only: [:show, :edit, :update, :destroy]
  skip_before_action :require_login, [:new]

  def index
    require_login
    @registers = Register.all
  end

  def show
  end

  def new
    @register = Register.new
  end

  # GET /registers/1/edit
  def edit
  end

  # POST /registers
  # POST /registers.json
  def create
    params = register_params()
    @register = Register.new()
    @register.login = params[:login]
    @register.password = params[:password]
    if @register.save
      sign_in @register
      redirect_to '/'
    else
      render 'new'
    end
  end

  # PATCH/PUT /registers/1
  # PATCH/PUT /registers/1.json
  def update
    respond_to do |format|
      if @register.update(register_params)
        format.html { redirect_to @register, notice: 'Register was successfully updated.' }
        format.json { head :no_content }
      else
        format.html { render action: 'edit' }
        format.json { render json: @register.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /registers/1
  def destroy
    if current_register
      shoot_foot = (@register.id == current_register.id)
    else
      shoot_foot = false
    end
    @register.destroy()
    if shoot_foot
      sign_out
      redirect_to '/signin'
    else
      redirect_to '/registers'
    end
  end
  private
  # Use callbacks to share common setup or constraints between actions.
  def set_register
    @register = Register.find(params[:id])
  end

  # Never trust parameters from the scary internet, only allow the white list through.
  def register_params
    params.require(:register).permit(:login, :password)
  end
end

Sessions_controller
class SessionsController < ApplicationController
  skip_before_action :require_login, [:new, :create]

  def new
    if current_register
      redirect_to '/main/index'
    end
  end

  def create
    register = Register.find_by_login_and_password(params[:session][:login], params[:session][:password])
    if register != nil
      sign_in register
      redirect_to register
    else
      flash[:alert] = 'Invalid email/password combination'
      render 'new'
      flash[:alert] = ''
    end
  end

  def destroy
    sign_out
    redirect_to '/signin'
  end
end

Τΰιλ Sessions_helper.rb
module SessionsHelper
  def sign_in(register)
    cookies.permanent[:remember_token] = register.remember_token
    session[:user] = register
  end
  def signed_in?
    session[:user] != nil
  end
  def sign_out
    session[:user] = nil
    cookies.delete(:remember_token)
  end
  def current_register
    if cookies[:remember_token]
      session[:user] ||= Register.find_by_remember_token(cookies[:remember_token])
    end
    session[:user]
  end
end

